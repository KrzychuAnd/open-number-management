package com.open.numberManagement.entity;
// Generated Feb 10, 2018 1:15:48 AM by Hibernate Tools 5.0.6.Final

import static javax.persistence.GenerationType.IDENTITY;
import static com.open.numberManagement.util.Constants.ADMINISTRATOR_ROLE;

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Users generated by hbm2java
 */
@Entity
@EntityListeners(AuditingEntityListener.class)
@Table(name = "users", catalog = "openNM", uniqueConstraints = @UniqueConstraint(columnNames = "login"))
public class User implements UserDetails {

	private Integer id;
	private String login;
	private String firstName;
	private String lastName;
	private String email;
	private String password;
	private Integer roleId;
	private char locked;
	private String rowAddedUser;
	private Date rowAddedDttm;
	private String rowUpdateUser;
	private Date rowUpdateDttm;

    private Role role;
	
	public User() {
	}

	@OneToOne(fetch = FetchType.EAGER, optional = true)
    @JoinColumn(name = "role_id", insertable = false, updatable = false)    
	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	public User(String login, String firstName, String lastName, String password, char locked, String rowAddedUser,
			Date rowAddedDttm, String rowUpdateUser, Date rowUpdateDttm) {
		this.login = login;
		this.firstName = firstName;
		this.lastName = lastName;
		this.password = password;
		this.locked = locked;
		this.rowAddedUser = rowAddedUser;
		this.rowAddedDttm = rowAddedDttm;
		this.rowUpdateUser = rowUpdateUser;
		this.rowUpdateDttm = rowUpdateDttm;
	}

	public User(String login, String firstName, String lastName, String email, String password, Integer roleId,
			char locked, String rowAddedUser, Date rowAddedDttm, String rowUpdateUser, Date rowUpdateDttm) {
		this.login = login;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.password = password;
		this.roleId = roleId;
		this.locked = locked;
		this.rowAddedUser = rowAddedUser;
		this.rowAddedDttm = rowAddedDttm;
		this.rowUpdateUser = rowUpdateUser;
		this.rowUpdateDttm = rowUpdateDttm;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "login", unique = true, nullable = false, length = 50)
	public String getLogin() {
		return this.login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	@Column(name = "first_name", nullable = false, length = 50)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", nullable = false, length = 50)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "email", length = 50)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@JsonIgnore
	@Column(name = "password", nullable = false, length = 50)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "role_id")
	public Integer getRoleId() {
		return this.roleId;
	}

	public void setRoleId(Integer roleId) {
		this.roleId = roleId;
	}

	@Column(name = "locked", nullable = false, length = 1)
	public char getLocked() {
		return this.locked;
	}

	public void setLocked(char locked) {
		this.locked = locked;
	}

	@CreatedBy
	@Column(name = "row_added_user", nullable = false, length = 50)
	public String getRowAddedUser() {
		return this.rowAddedUser;
	}

	public void setRowAddedUser(String rowAddedUser) {
		this.rowAddedUser = rowAddedUser;
	}

	@CreatedDate
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "row_added_dttm", nullable = false, length = 19)
	public Date getRowAddedDttm() {
		return this.rowAddedDttm;
	}

	public void setRowAddedDttm(Date rowAddedDttm) {
		this.rowAddedDttm = rowAddedDttm;
	}

	@LastModifiedBy
	@Column(name = "row_update_user", nullable = false, length = 50)
	public String getRowUpdateUser() {
		return this.rowUpdateUser;
	}

	public void setRowUpdateUser(String rowUpdateUser) {
		this.rowUpdateUser = rowUpdateUser;
	}

	@LastModifiedDate
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "row_update_dttm", nullable = false, length = 19)
	public Date getRowUpdateDttm() {
		return this.rowUpdateDttm;
	}

	public void setRowUpdateDttm(Date rowUpdateDttm) {
		this.rowUpdateDttm = rowUpdateDttm;
	}

	@Transient
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		Set<GrantedAuthority> permissions = new HashSet<>();
		
		if (this.role != null) {
			this.role.getPermissions().forEach(permission -> {
				permissions.add(new SimpleGrantedAuthority(permission.getName()));
	        });
		}
		
		return permissions;
	}

	@Transient
	@Override
	public String getUsername() {
		return login;
	}

	@Transient
	@Override
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Transient
	@Override
	public boolean isAccountNonLocked() {
		return (this.locked == 'N');
	}

	@Transient
	@Override
	public boolean isCredentialsNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Transient
	@Override
	public boolean isEnabled() {
		// TODO Auto-generated method stub
		return true;
	}
	
	@Transient
	public boolean isAdminUser() {
		return (this.role != null && this.role.getName().equals(ADMINISTRATOR_ROLE));
	}

}
